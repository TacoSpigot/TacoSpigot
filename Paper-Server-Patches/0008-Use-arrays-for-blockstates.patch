From 15faec3adce1e9a2a205a94387b68d9d63fd286b Mon Sep 17 00:00:00 2001
From: Techcable <Techcable@techcable.net>
Date: Thu, 31 Mar 2016 14:13:07 -0700
Subject: [PATCH] Use arrays for blockstates

It uses a special data structure that is a combination of a lookup table and a binary search. Most blockstates have sequental ids, so they can go in a lookup table. However, there are some blockstates that are not sequental, which are stuffed into a seperate sorted array, and then do a binary search over that.
This data structure is usualy faster than a hashmap (especially when using the lookup table), and since the array we binary search over is so small, the outliers don't make a big difference.

Should help with redstone.

diff --git a/src/main/java/net/minecraft/server/BlockState.java b/src/main/java/net/minecraft/server/BlockState.java
index 1d626ce2..02c5339f 100644
--- a/src/main/java/net/minecraft/server/BlockState.java
+++ b/src/main/java/net/minecraft/server/BlockState.java
@@ -2,14 +2,60 @@ package net.minecraft.server;
 
 import com.google.common.base.MoreObjects;
 
+// TacoSpigot start
+import java.util.Arrays;
+import java.util.HashMap;
+import java.util.Map;
+// TacoSpigot end
+
 public abstract class BlockState<T extends Comparable<T>> implements IBlockState<T> {
 
     private final Class<T> a;
     private final String b;
+    // TacoSpigot start
+    private final int id;
+
+    @Override
+    public int getId() {
+        return id;
+    }
+
+    private static final Map<String, Integer> blockStateIds = new HashMap<>();
+    private static volatile BlockState[] byId = new BlockState[0];
+
+    public static BlockState getById(int id) {
+        BlockState[] byId = BlockState.byId;
+        if (id >= 0 && id < byId.length) {
+            return byId[id];
+        } else {
+            throw new IllegalArgumentException("Invalid BlockState id: " + id);
+        }
+    }
+    private static synchronized int computeId(BlockState state) {
+        /*
+         * NOTE: We have to use a string as the key,
+         * since the BlockState object might not be fully initialized yet.
+         * This relies on the assumption that state == other
+         * if and only if (state.b == other.b && state.a == other.a).
+         * This is true in the current version of minecraft,
+         * but future versions might change this
+         */
+        String stringId = state.b + ":" + state.a;
+        return blockStateIds.computeIfAbsent(stringId, (strId) -> {
+            BlockState[] byId = BlockState.byId;
+            int newId = byId.length;
+            byId = Arrays.copyOf(byId, newId + 1);
+            byId[newId] = state;
+            BlockState.byId = byId;
+            return newId;
+        });
+    }
+    // TacoSpigot end
 
     protected BlockState(String s, Class<T> oclass) {
         this.a = oclass;
         this.b = s;
+        this.id = computeId(this); // TacoSpigot - compute id after setting fields
     }
 
     public String a() {
diff --git a/src/main/java/net/minecraft/server/BlockStateBoolean.java b/src/main/java/net/minecraft/server/BlockStateBoolean.java
index 02b4956e..63e592ac 100644
--- a/src/main/java/net/minecraft/server/BlockStateBoolean.java
+++ b/src/main/java/net/minecraft/server/BlockStateBoolean.java
@@ -42,6 +42,7 @@ public class BlockStateBoolean extends BlockState<Boolean> {
 
     // Spigot start
     private int hashCode;
+
     public int hashCode() {
         int hash = hashCode;
         if (hash == 0) {
@@ -51,4 +52,22 @@ public class BlockStateBoolean extends BlockState<Boolean> {
         return hash;
     }
     // Spigot end
+    // TacoSpigot start
+    @Override
+    public int getValueId(Boolean value) {
+        return value ? 1 : 0;
+    }
+
+    @Override
+    public Boolean getByValueId(int id) {
+        switch (id) {
+            case 0:
+                return false;
+            case 1:
+                return true;
+            default:
+                throw new IllegalArgumentException("Invalid id: " + id);
+        }
+    }
+    // TacoSpigot end
 }
diff --git a/src/main/java/net/minecraft/server/BlockStateEnum.java b/src/main/java/net/minecraft/server/BlockStateEnum.java
index 2118587e..d12c5456 100644
--- a/src/main/java/net/minecraft/server/BlockStateEnum.java
+++ b/src/main/java/net/minecraft/server/BlockStateEnum.java
@@ -43,7 +43,6 @@ public class BlockStateEnum<T extends Enum<T> & INamable> extends BlockState<T>
     public Collection<T> c() {
         return this.a;
     }
-
     public Optional<T> b(String s) {
         return Optional.fromNullable(this.b.get(s));
     }
@@ -52,6 +51,23 @@ public class BlockStateEnum<T extends Enum<T> & INamable> extends BlockState<T>
         return ((INamable) t0).getName();
     }
 
+    // TacoSpigot start
+    @Override
+    public int getValueId(T value) {
+        return value.ordinal();
+    }
+
+    @Override
+    public T getByValueId(int id) {
+        T[] values = this.b().getEnumConstants();
+        if (id >= 0 && id < values.length) {
+            return values[id];
+        } else {
+            throw new IllegalArgumentException("Invalid id: " + id);
+        }
+    }
+    // TacoSpigot end
+
     @Override // Paper - override equals as BlockStateEnum is a singleton
     public boolean equals(Object object) {
        return this == object;
diff --git a/src/main/java/net/minecraft/server/BlockStateInteger.java b/src/main/java/net/minecraft/server/BlockStateInteger.java
index 403fa144..b6e144e8 100644
--- a/src/main/java/net/minecraft/server/BlockStateInteger.java
+++ b/src/main/java/net/minecraft/server/BlockStateInteger.java
@@ -9,9 +9,40 @@ import java.util.HashSet;
 public class BlockStateInteger extends BlockState<Integer> {
 
     private final ImmutableSet<Integer> a;
+    // TacoSpigot start
+    private final int min, max;
+    private final int range;
+
+    @Override
+    public int getValueId(Integer value) {
+        if (value < min) {
+            throw new IllegalArgumentException("Too small: " + value);
+        } else if (value > max) {
+            throw new IllegalArgumentException("Too large: " + value);
+        } else {
+            return value - min;
+        }
+    }
+
+    @Override
+    public Integer getByValueId(int id) {
+        if (id < 0) {
+            throw new IllegalArgumentException("Negative id: " + id);
+        } else if (id > range) {
+            throw new IllegalArgumentException("Id is out of range: " + id);
+        } else {
+            return id;
+        }
+    }
+    // TacoSpigot end
 
     protected BlockStateInteger(String s, int i, int j) {
         super(s, Integer.class);
+        // TacoSpigot start
+        this.min = i;
+        this.max = j;
+        this.range = (max - min); // min and max are _both_ inclusive (there's a reason you're not supposed to do this :p)
+        // TacoSpigot end
         if (i < 0) {
             throw new IllegalArgumentException("Min value of " + s + " must be 0 or greater");
         } else if (j <= i) {
diff --git a/src/main/java/net/minecraft/server/BlockStateList.java b/src/main/java/net/minecraft/server/BlockStateList.java
index b666c099..15b8c398 100644
--- a/src/main/java/net/minecraft/server/BlockStateList.java
+++ b/src/main/java/net/minecraft/server/BlockStateList.java
@@ -24,6 +24,14 @@ import java.util.Map.Entry;
 import java.util.regex.Pattern;
 import javax.annotation.Nullable;
 
+// TacoSpigot start
+import net.techcable.tacospigot.ImmutableArrayMap;
+import net.techcable.tacospigot.ImmutableArrayTable;
+import net.techcable.tacospigot.SimpleMap;
+import net.techcable.tacospigot.SimpleTable;
+import net.techcable.tacospigot.TacoSpigotConfig;
+// TacoSpigot end
+
 public class BlockStateList {
 
     private static final Pattern a = Pattern.compile("^[a-z0-9_]+$");
@@ -147,16 +155,27 @@ public class BlockStateList {
     static class BlockData extends BlockDataAbstract {
 
         private final Block a;
-        private final ImmutableMap<IBlockState<?>, Comparable<?>> b;
-        private ImmutableTable<IBlockState<?>, Comparable<?>, IBlockData> c;
+        // TacoSpigot start
+        private final ImmutableMap<IBlockState<?>, Comparable<?>> bAsImmutableMap;
+        private final SimpleMap<IBlockState<?>, Comparable<?>> b;
+        private SimpleTable<IBlockState, Comparable, IBlockData> c;
+        // TacoSpigot end
 
         private BlockData(Block block, ImmutableMap<IBlockState<?>, Comparable<?>> immutablemap) {
             this.a = block;
-            this.b = immutablemap;
+            // TacoSpigot start
+            this.bAsImmutableMap = immutablemap;
+            if (TacoSpigotConfig.useArraysForBlockStates) {
+                ImmutableArrayMap<IBlockState, Comparable> arrayMap = new ImmutableArrayMap<IBlockState, Comparable>(IBlockState::getId, BlockState::getById, (ImmutableMap) immutablemap);
+                b = (key) -> arrayMap.get(key.getId());
+            } else {
+                b = immutablemap::get;
+            }
+            // TacoSpigot end
         }
 
         public Collection<IBlockState<?>> s() {
-            return Collections.unmodifiableCollection(this.b.keySet());
+            return Collections.unmodifiableCollection(this.bAsImmutableMap.keySet()); // TacoSpigot - use bAsImmutableMap
         }
 
         public <T extends Comparable<T>> T get(IBlockState<T> iblockstate) {
@@ -188,7 +207,7 @@ public class BlockStateList {
         }
 
         public ImmutableMap<IBlockState<?>, Comparable<?>> t() {
-            return this.b;
+            return this.bAsImmutableMap; // TacoSpigot
         }
 
         public Block getBlock() {
@@ -208,7 +227,7 @@ public class BlockStateList {
                 throw new IllegalStateException();
             } else {
                 HashBasedTable hashbasedtable = HashBasedTable.create();
-                UnmodifiableIterator unmodifiableiterator = this.b.entrySet().iterator();
+                UnmodifiableIterator unmodifiableiterator = this.bAsImmutableMap.entrySet().iterator(); // TacoSpigot - use bAsImmutableMap
 
                 while (unmodifiableiterator.hasNext()) {
                     Entry entry = (Entry) unmodifiableiterator.next();
@@ -218,18 +237,34 @@ public class BlockStateList {
                     while (iterator.hasNext()) {
                         Comparable comparable = (Comparable) iterator.next();
 
-                        if (comparable != entry.getValue()) {
+                        if (true) { // TacoSpigot - include everything in the table
                             hashbasedtable.put(iblockstate, comparable, map.get(this.b(iblockstate, comparable)));
                         }
                     }
                 }
 
-                this.c = ImmutableTable.copyOf(hashbasedtable);
+                // TacoSpigot start
+                if (TacoSpigotConfig.useArraysForBlockStates) {
+                    // I had some 'fun' getting this to work >:(
+                    ImmutableArrayTable<IBlockState, Comparable, IBlockData> arrayTable = new ImmutableArrayTable<IBlockState, Comparable, IBlockData> (
+                            IBlockState::getId,
+                            BlockState::getById,
+                            IBlockState::getValueId,
+                            IBlockState::getByValueId,
+                            hashbasedtable
+                    );
+                    this.c = (row, column) -> arrayTable.get(row.getId(), row.getValueId(column));
+                } else {
+                    ImmutableTable<IBlockState, Comparable, IBlockData> immutableTable = ImmutableTable.copyOf(hashbasedtable);
+                    this.c = immutableTable::get;
+                }
+                // TacoSpigot end
             }
         }
 
         private Map<IBlockState<?>, Comparable<?>> b(IBlockState<?> iblockstate, Comparable<?> comparable) {
-            HashMap hashmap = Maps.newHashMap(this.b);
+            HashMap hashmap = Maps.newHashMap(this.bAsImmutableMap); // TacoSpigot - use 'bAsImmutableMap'
+
 
             hashmap.put(iblockstate, comparable);
             return hashmap;
diff --git a/src/main/java/net/minecraft/server/IBlockState.java b/src/main/java/net/minecraft/server/IBlockState.java
index de548018..51143a6a 100644
--- a/src/main/java/net/minecraft/server/IBlockState.java
+++ b/src/main/java/net/minecraft/server/IBlockState.java
@@ -14,4 +14,12 @@ public interface IBlockState<T extends Comparable<T>> {
     Optional<T> b(String s);
 
     String a(T t0);
+
+    // TacoSpigot start
+    public int getId();
+
+    public int getValueId(T value);
+
+    public T getByValueId(int id);
+    // TacoSpigot end
 }
diff --git a/src/main/java/net/techcable/tacospigot/ImmutableArrayMap.java b/src/main/java/net/techcable/tacospigot/ImmutableArrayMap.java
new file mode 100644
index 00000000..6fc4c57a
--- /dev/null
+++ b/src/main/java/net/techcable/tacospigot/ImmutableArrayMap.java
@@ -0,0 +1,143 @@
+package net.techcable.tacospigot;
+
+import java.util.Arrays;
+import java.util.Comparator;
+import java.util.Iterator;
+import java.util.Map;
+import java.util.Objects;
+import java.util.function.IntFunction;
+import java.util.function.ToIntFunction;
+
+import com.google.common.base.Preconditions;
+
+import org.apache.commons.lang3.ArrayUtils;
+
+public class ImmutableArrayMap<K, V> {
+    private final int offset;
+    private final Object[] data;
+    private final Object[] outlyingData;
+    private final int[] outlyingIds;
+
+    private final int size;
+
+    /**
+     * Allow at most 48 empty values in the range of sequential values.
+     * This is a should be a good amount for the block state ids,
+     * since the indexes shouldn't be too far apart, and we need them to be fast.
+     */
+    private static final int MAXIMUM_EMPTY = 48;
+
+    public ImmutableArrayMap(ToIntFunction<K> indexer, IntFunction<K> byIndex, Map<K, V> map) {
+        Preconditions.checkNotNull(indexer, "Null indexer function");
+        Preconditions.checkNotNull(byIndex, "Null byIndex function");
+        Preconditions.checkNotNull(map, "Null map");
+        this.size = map.size();
+        @SuppressWarnings("unchecked")
+        Map.Entry<K, V>[] entries = new Map.Entry[size];
+        Iterator<Map.Entry<K, V>> iterator = map.entrySet().iterator();
+        for (int i = 0; i < entries.length; i++) {
+            Preconditions.checkArgument(iterator.hasNext(), "Expected %s entries but only got %s", size, i + 1);
+            entries[i] = iterator.next();
+        }
+        Arrays.sort(entries, Comparator.comparingInt(entry -> indexer.applyAsInt(entry.getKey())));
+        Preconditions.checkArgument(!iterator.hasNext(), "Got more than expected %s entries", size);
+        int[] ids = Arrays.stream(entries).map(Map.Entry::getKey).mapToInt(indexer).toArray();
+        assert Arrays.equals(ids, Arrays.stream(ids).sorted().toArray()) : "Entries should be sorted by id!";
+        if (ids.length > 0) {
+            IDRange range = IDRange.findLargestRange(ids, MAXIMUM_EMPTY);
+            assert range.size() <= size;
+            this.data = new Object[range.span()];
+            this.outlyingIds = size > range.size() ? new int[size - range.size()] : ArrayUtils.EMPTY_INT_ARRAY;
+            this.outlyingData = size > range.size() ? new Object[size - range.size()] : ArrayUtils.EMPTY_OBJECT_ARRAY;
+            this.offset = range.minId;
+            int outlyingIndex = 0;
+            for (Map.Entry<K, V> entry : entries) {
+                K key = entry.getKey();
+                V value = entry.getValue();
+                int id = indexer.applyAsInt(key);
+                Preconditions.checkArgument(id >= 0, "Negative id for %s: %s", key, id);
+                if (id >= range.minId && id <= range.maxId) {
+                    int index = id - offset;
+                    data[index] = value;
+                } else {
+                    int index = outlyingIndex++;
+                    outlyingIds[index] = id;
+                    outlyingData[index] = value;
+                }
+            }
+        } else {
+            this.offset = 0;
+            this.data = ArrayUtils.EMPTY_OBJECT_ARRAY;
+            this.outlyingIds = ArrayUtils.EMPTY_INT_ARRAY;
+            this.outlyingData = ArrayUtils.EMPTY_OBJECT_ARRAY;
+        }
+    }
+
+    /* default */ static class IDRange {
+        public final int[] ids;
+        public final int minIndex, maxIndex; // Inclusive end
+        public final int minId, maxId;
+        public IDRange(int[] ids, int minIndex, int maxIndex) {
+            assert minIndex <= maxIndex;
+            this.ids = Objects.requireNonNull(ids);
+            this.minIndex = minIndex;
+            this.maxIndex = maxIndex;
+            this.minId = ids[minIndex];
+            this.maxId = ids[maxIndex];
+            assert size() <= span();
+        }
+
+        public int size() {
+            return maxIndex - minIndex + 1;
+        }
+
+        public int span() {
+            return maxId - minId + 1;
+        }
+
+        public static IDRange findLargestRange(int[] ids, int maximumEmpty) {
+            assert ids.length > 0;
+            IDRange largestRange = new IDRange(ids, 0, 0);
+            for (int minIndex = 0; minIndex < ids.length; minIndex++) {
+                // Find the largest 'maxIndex' where numEmpty <= maximumEmpty
+                int maxIndex = minIndex;
+                int maxId = ids[maxIndex];
+                int numEmpty = 0;
+                while (maxIndex + 1 < ids.length) {
+                    int newMaxId = ids[maxIndex + 1];
+                    assert newMaxId > maxId;
+                    int distance = newMaxId - maxId;
+                    // The new number of empty elements is any distance bigger than one
+                    int newNumEmpty = numEmpty + (distance - 1);
+                    if (newNumEmpty > maximumEmpty) break;
+                    numEmpty = newNumEmpty;
+                    maxIndex += 1;
+                }
+                IDRange range = new IDRange(ids, minIndex, maxIndex);
+
+                if (range.size() > largestRange.size()) {
+                    largestRange = range;
+                }
+            }
+            return largestRange;
+        }
+    }
+
+    public int size() {
+        return size;
+    }
+
+    @SuppressWarnings("unchecked")
+    public V get(int id) {
+        int index = id - offset;
+        if (index >= 0 && index < data.length) {
+            return (V) data[index];
+        }
+        int outlyingIndex = Arrays.binarySearch(outlyingIds, id);
+        if (outlyingIndex >= 0 && outlyingIndex < outlyingData.length) {
+            return (V) outlyingData[outlyingIndex];
+        } else {
+            return null;
+        }
+    }
+}
diff --git a/src/main/java/net/techcable/tacospigot/ImmutableArrayTable.java b/src/main/java/net/techcable/tacospigot/ImmutableArrayTable.java
new file mode 100644
index 00000000..aa37b2f4
--- /dev/null
+++ b/src/main/java/net/techcable/tacospigot/ImmutableArrayTable.java
@@ -0,0 +1,36 @@
+package net.techcable.tacospigot;
+
+import java.util.Map;
+import java.util.function.IntFunction;
+import java.util.function.ToIntBiFunction;
+import java.util.function.ToIntFunction;
+
+import com.google.common.base.Preconditions;
+import com.google.common.collect.ImmutableMap;
+import com.google.common.collect.Table;
+
+import net.techcable.tacospigot.function.ObjIntBiFunction;
+
+public class ImmutableArrayTable<R, C, V> {
+    private final ImmutableArrayMap<R, ImmutableArrayMap<C, V>> rowMap;
+
+    public ImmutableArrayTable(ToIntFunction<R> rowIndexer, IntFunction<R> rowById, ToIntBiFunction<R, C> columnGetId, ObjIntBiFunction<R, C> columnById, Table<R, C, V> table) {
+        Preconditions.checkNotNull(table, "Null table");
+        ImmutableMap.Builder<R, ImmutableArrayMap<C, V>> rowMapBuilder = ImmutableMap.builder();
+        for (Map.Entry<R, Map<C, V>> rowEntry : table.rowMap().entrySet()) {
+            R row = rowEntry.getKey();
+            Preconditions.checkNotNull(row, "Null row");
+            ImmutableMap.Builder<C, V> rowMapEntryBuilder = ImmutableMap.builder();
+            for (Map.Entry<C, V> rowEntryEntry : rowEntry.getValue().entrySet()) {
+                rowMapEntryBuilder.put(rowEntryEntry);
+            }
+            rowMapBuilder.put(row, new ImmutableArrayMap<>((c) -> columnGetId.applyAsInt(row, c), (id) -> columnById.apply(row, id), rowMapEntryBuilder.build()));
+        }
+        this.rowMap = new ImmutableArrayMap<>(rowIndexer, rowById, rowMapBuilder.build());
+    }
+
+    public V get(int rowId, int columnId) {
+        ImmutableArrayMap<C, V> rowEntry = rowMap.get(rowId);
+        return rowEntry != null ? rowEntry.get(columnId) : null;
+    }
+}
diff --git a/src/main/java/net/techcable/tacospigot/SimpleMap.java b/src/main/java/net/techcable/tacospigot/SimpleMap.java
new file mode 100644
index 00000000..27559ee6
--- /dev/null
+++ b/src/main/java/net/techcable/tacospigot/SimpleMap.java
@@ -0,0 +1,10 @@
+package net.techcable.tacospigot;
+
+import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
+
+@FunctionalInterface
+public interface SimpleMap<K, V> {
+    @Nullable
+    public V get(@Nonnull K key);
+}
diff --git a/src/main/java/net/techcable/tacospigot/SimpleTable.java b/src/main/java/net/techcable/tacospigot/SimpleTable.java
new file mode 100644
index 00000000..f76ad60b
--- /dev/null
+++ b/src/main/java/net/techcable/tacospigot/SimpleTable.java
@@ -0,0 +1,10 @@
+package net.techcable.tacospigot;
+
+import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
+
+@FunctionalInterface
+public interface SimpleTable<R, C, V> {
+    @Nullable
+    public V get(@Nonnull R row, @Nonnull C column);
+}
diff --git a/src/main/java/net/techcable/tacospigot/TacoSpigotConfig.java b/src/main/java/net/techcable/tacospigot/TacoSpigotConfig.java
index ce66b1c3..b7699d8c 100644
--- a/src/main/java/net/techcable/tacospigot/TacoSpigotConfig.java
+++ b/src/main/java/net/techcable/tacospigot/TacoSpigotConfig.java
@@ -102,4 +102,9 @@ public class TacoSpigotConfig {
         config.addDefault(path, def);
         return config.getString(path, config.getString(path));
     }
+
+    public static boolean useArraysForBlockStates;
+    private static void useArraysForBlockStates() {
+        useArraysForBlockStates = getBoolean("useArraysForBlockStates", false);
+    }
 }
diff --git a/src/main/java/net/techcable/tacospigot/function/ObjIntBiFunction.java b/src/main/java/net/techcable/tacospigot/function/ObjIntBiFunction.java
new file mode 100644
index 00000000..87a50a3d
--- /dev/null
+++ b/src/main/java/net/techcable/tacospigot/function/ObjIntBiFunction.java
@@ -0,0 +1,6 @@
+package net.techcable.tacospigot.function;
+
+@FunctionalInterface
+public interface ObjIntBiFunction<T, R> {
+    public R apply(T t, int i);
+}
diff --git a/src/test/java/net/techcable/tacospigot/ImmutableArrayMapTest.java b/src/test/java/net/techcable/tacospigot/ImmutableArrayMapTest.java
new file mode 100644
index 00000000..179d0685
--- /dev/null
+++ b/src/test/java/net/techcable/tacospigot/ImmutableArrayMapTest.java
@@ -0,0 +1,119 @@
+package net.techcable.tacospigot;
+
+import java.util.Random;
+
+import com.google.common.collect.ImmutableList;
+import com.google.common.collect.ImmutableMap;
+
+import org.junit.Assert;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.Parameterized;
+
+import static org.junit.Assert.*;
+
+@RunWith(Parameterized.class)
+public class ImmutableArrayMapTest {
+    private final ImmutableMap<Integer, String> expected;
+    private final ImmutableArrayMap<Integer, String> actual;
+    public ImmutableArrayMapTest(ImmutableMap<Integer, String> data) {
+        this.expected = data;
+        this.actual = new ImmutableArrayMap<>(Integer::intValue, Integer::valueOf, data);
+    }
+
+    @Test
+    public void testSize() {
+        assertEquals(expected.size(), actual.size());
+    }
+
+    @Test
+    public void testGets() {
+        expected.forEach((key, expectedValue) -> {
+            String actualValue = this.actual.get(key);
+            if (!actualValue.equals(expectedValue)) {
+                fail(key + " should be " + expectedValue + ", not " + actualValue);
+            }
+        });
+    }
+
+    @Test
+    public void testNotContainsRandom() {
+        new Random().ints(0, 10_000)
+                .filter((key) -> !expected.containsKey(key))
+                .limit(2500)
+                .forEach((int key) -> {
+                    String value = actual.get(key);
+                    if (value != null) {
+                        fail("Map shouldn't contain " + key + ": " + value);
+                    }
+                });
+    }
+
+    @Parameterized.Parameters
+    public static ImmutableList<ImmutableMap<Integer, String>> data() {
+        return ImmutableList.of(
+                // Entirely sparse ids
+                ImmutableMap.of(
+                        100, "bob",
+                        400, "taco",
+                        1000, "bananas",
+                        2000, "love"
+                ),
+                ImmutableMap.of(
+                        1000, "bamboo",
+                        500, "eats",
+                        7000, "leaves",
+                        400, "panda"
+                ),
+                // Sparse...dense...sparse
+                ImmutableMap.<Integer, String>builder()
+                        .put(50, "potato")
+                        .put(500, "banana")
+                        .put(800, "taco")
+                        .put(801, "loves")
+                        .put(805, "you")
+                        .put(811, "too")
+                        .put(5000, "baby")
+                        .build(),
+                // Sparse..dense
+                ImmutableMap.<Integer, String>builder()
+                        .put(6000, "I think that")
+                        .put(10_000, "testing is hard")
+                        .put(400, "almost")
+                        .put(401, "as hard as")
+                        .put(406, "pooping")
+                        .put(408, "in the toilet")
+                        .build(),
+                // Dense...sparse
+                ImmutableMap.<Integer, String>builder()
+                        .put(407, "bananas")
+                        .put(408, "need")
+                        .put(400, "love")
+                        .put(409, "too!")
+                        .put(5000, "good")
+                        .put(8000, "for you!")
+                        .build(),
+                // All dense
+                ImmutableMap.<Integer, String>builder()
+                        .put(409, "Do you")
+                        .put(400, "want to")
+                        .put(309, "build a")
+                        .put(405, "snowman?")
+                        .put(411, "or ride")
+                        .put(412, "our bike")
+                        .put(308, "around")
+                        .put(407, "the halls?")
+                        .build(),
+                // Perfectly sequential (but randomly sorted)
+                ImmutableMap.<Integer, String>builder()
+                        .put(408, "fifteen")
+                        .put(411, "minutes")
+                        .put(406, "could")
+                        .put(407, "save you")
+                        .put(409, "fifteen")
+                        .put(410, "percent or more")
+                        .put(405, "on car insurance")
+                        .build()
+        );
+    }
+}
-- 
2.16.2

