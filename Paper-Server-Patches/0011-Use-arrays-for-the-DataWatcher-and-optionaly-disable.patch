From 802d73bc3d51af254e7f9ef037751f5188105e6c Mon Sep 17 00:00:00 2001
From: Techcable <Techcable@techcable.net>
Date: Mon, 20 Jun 2016 09:48:02 -0700
Subject: [PATCH] Use arrays for the DataWatcher and optionaly disable
 read-locking

As of 1.9, metadata ids are completely seqentual so we can just use a simple lookup table.
This makes things a lot faster.
Also, when we use 'ArrayMap', we can let server owners optionally disable read-locking because ArrayMap is thread safe.

diff --git a/src/main/java/net/minecraft/server/DataWatcher.java b/src/main/java/net/minecraft/server/DataWatcher.java
index 820c15278..ac728575b 100644
--- a/src/main/java/net/minecraft/server/DataWatcher.java
+++ b/src/main/java/net/minecraft/server/DataWatcher.java
@@ -12,7 +12,14 @@ import java.util.Map;
 import java.util.concurrent.locks.ReadWriteLock;
 import java.util.concurrent.locks.ReentrantReadWriteLock;
 import javax.annotation.Nullable;
+
+import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
 import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap; // Paper
+
+import net.techcable.tacospigot.ArrayMap;
+import net.techcable.tacospigot.NoOpReadWriteLock;
+import net.techcable.tacospigot.TacoSpigotConfig;
+
 import org.apache.commons.lang3.ObjectUtils;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
@@ -22,8 +29,8 @@ public class DataWatcher {
     private static final Logger a = LogManager.getLogger();
     private static final Map<Class<? extends Entity>, Integer> b = Maps.newHashMap();
     private final Entity c;
-    private final Map<Integer, DataWatcher.Item<?>> d = new Int2ObjectOpenHashMap<>(); // Paper
-    private final ReadWriteLock e = new ReentrantReadWriteLock();
+    private final Int2ObjectMap<Item<?>> d = TacoSpigotConfig.useArraysForDatawatcher ? new ArrayMap<>() : new Int2ObjectOpenHashMap<>(); // Paper // TacoSpigot - use 'Int2ObjectMap' and use 'ArrayMap' if useArraysForDatawatcher
+    private final ReadWriteLock e = TacoSpigotConfig.disableDataWatcherReadLocking && TacoSpigotConfig.useArraysForDatawatcher ? NoOpReadWriteLock.INSTANCE : new ReentrantReadWriteLock(); // TacoSpigot - don't lock if we're using ArrayMap
     private boolean f = true;
     private boolean g;
 
@@ -89,7 +96,7 @@ public class DataWatcher {
         DataWatcher.Item datawatcher_item = new DataWatcher.Item(datawatcherobject, t0);
 
         this.e.writeLock().lock();
-        this.d.put(Integer.valueOf(datawatcherobject.a()), datawatcher_item);
+        this.d.put(datawatcherobject.a(), datawatcher_item); // TacoSpigot - primitives
         this.f = false;
         this.e.writeLock().unlock();
     }
@@ -100,7 +107,7 @@ public class DataWatcher {
         DataWatcher.Item datawatcher_item;
 
         try {
-            datawatcher_item = (DataWatcher.Item) this.d.get(Integer.valueOf(datawatcherobject.a()));
+            datawatcher_item = (DataWatcher.Item) this.d.get(datawatcherobject.a()); // TacoSpigot - use primitives
         } catch (Throwable throwable) {
             CrashReport crashreport = CrashReport.a(throwable, "Getting synched entity data");
             CrashReportSystemDetails crashreportsystemdetails = crashreport.a("Synched entity data");
diff --git a/src/main/java/net/techcable/tacospigot/ArrayMap.java b/src/main/java/net/techcable/tacospigot/ArrayMap.java
new file mode 100644
index 000000000..36c9fd252
--- /dev/null
+++ b/src/main/java/net/techcable/tacospigot/ArrayMap.java
@@ -0,0 +1,234 @@
+package net.techcable.tacospigot;
+
+import it.unimi.dsi.fastutil.ints.AbstractInt2ObjectMap;
+import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
+import it.unimi.dsi.fastutil.objects.AbstractObjectCollection;
+import it.unimi.dsi.fastutil.objects.AbstractObjectSet;
+import it.unimi.dsi.fastutil.objects.ObjectCollection;
+import it.unimi.dsi.fastutil.objects.ObjectIterator;
+import it.unimi.dsi.fastutil.objects.ObjectSet;
+
+import java.util.NoSuchElementException;
+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
+import java.util.concurrent.atomic.AtomicReferenceArray;
+import java.util.function.BiConsumer;
+import java.util.function.ObjIntConsumer;
+import javax.annotation.Nonnull;
+import javax.annotation.concurrent.ThreadSafe;
+
+import static com.google.common.base.Preconditions.*;
+
+/**
+ * A concurrent map of integers to objects with non-locking read operations, and locking write operations.
+ * <p>
+ * This map is backed by a array, and therefore the amount of overhead this map incurs is equal to the largest key/integer.
+ * Therefore you should <i>not use this map if your keys will be large or scattered!</i>
+ * However, if the keys are dense and small, this may actually take less memory than a HashMap.
+ * </p>
+ *
+ * @param <V> the type of vales
+ */
+@SuppressWarnings("unchecked")
+@ThreadSafe
+public final class ArrayMap<V> extends AbstractInt2ObjectMap<V> {
+    private static final AtomicIntegerFieldUpdater<ArrayMap> SIZE_UPDATER = AtomicIntegerFieldUpdater.newUpdater(ArrayMap.class, "size");
+    private volatile int size;
+    @Nonnull
+    private volatile AtomicReferenceArray<V> values = new AtomicReferenceArray<>(0);
+    private volatile ObjectSet<Int2ObjectMap.Entry<V>> entrySet;
+    private volatile ObjectCollection<V> valuesCollection;
+
+    @Override
+    public ObjectSet<Int2ObjectMap.Entry<V>> int2ObjectEntrySet() {
+        return entrySet != null ? entrySet : (entrySet = new AbstractObjectSet<Int2ObjectMap.Entry<V>>() {
+            @Override
+            @Nonnull
+            public ObjectIterator<Int2ObjectMap.Entry<V>> iterator() {
+                return new EntryIterator<Int2ObjectMap.Entry<V>>() {
+                    @Override
+                    public Int2ObjectMap.Entry<V> next() {
+                        return nextEntry();
+                    }
+                };
+            }
+
+            @Override
+            public int size() {
+                return size;
+            }
+        });
+    }
+
+    @Override
+    @Nonnull
+    public ObjectCollection<V> values() {
+        return valuesCollection != null ? valuesCollection : (valuesCollection = new AbstractObjectCollection<V>() {
+
+            @Override
+            @Nonnull
+            public ObjectIterator<V> iterator() {
+                return new EntryIterator<V>() {
+                    @Override
+                    @Nonnull
+                    public V next() {
+                        return nextEntry().getValue();
+                    }
+                };
+            }
+
+            @Override
+            public int size() {
+                return size;
+            }
+        });
+    }
+
+    @Override
+    @SuppressWarnings("unchecked")
+    public V get(int i) {
+        AtomicReferenceArray<V> values = this.values;
+        return i >= 0 && i < values.length() ? values.get(i) : null;
+    }
+
+    @Override
+    public synchronized V put(int key, V value) {
+        checkNotNull(value, "Null value");
+        AtomicReferenceArray<V> values = this.values;
+        int length;
+        if (key < 0) {
+            throw new IllegalArgumentException(negativeKey(key));
+        } else if (key >= values.length()) {
+            expandAndPut(key, value); // Put in a separate method for inlining (its a unlikely slow-case)
+            return null;
+        } else {
+            V oldValue = values.getAndSet(key, value);
+            if (oldValue == null) SIZE_UPDATER.incrementAndGet(this); // New entry
+            return oldValue;
+        }
+    }
+
+    private void expandAndPut(int key, V value) {
+        assert Thread.holdsLock(this);
+        AtomicReferenceArray<V> values = this.values;
+        AtomicReferenceArray<V> copy = new AtomicReferenceArray<>(key + 1);
+        for (int i = 0; i < values.length(); i++) {
+            copy.set(i, values.get(i));
+        }
+        copy.set(key, value);
+        this.values = copy;
+        SIZE_UPDATER.incrementAndGet(this);
+    }
+
+    @Override
+    public synchronized V remove(int key) {
+        AtomicReferenceArray<V> values = this.values;
+        if (key < 0) {
+            throw new IllegalArgumentException(negativeKey(key));
+        } else if (key >= values.length()) {
+            return null;
+        } else {
+            V oldValue = values.getAndSet(key, null);
+            if (oldValue != null)
+                SIZE_UPDATER.decrementAndGet(this); // Entry was there before, but now we're removing it
+            return oldValue;
+        }
+    }
+
+    @Override
+    public boolean containsKey(int i) {
+        AtomicReferenceArray<V> values = this.values;
+        return i >= 0 && i < values.length() && values.get(i) != null;
+    }
+
+    @Override
+    public void forEach(BiConsumer<? super Integer, ? super V> action) {
+        forEachPrimitive((value, key) -> action.accept(key, value));
+    }
+
+    public void forEachPrimitive(ObjIntConsumer<V> action) {
+        AtomicReferenceArray<V> values = this.values;
+        for (int index = 0; index < values.length(); index++) {
+            V value = values.get(index);
+            if (value != null) {
+                action.accept(value, index);
+            }
+        }
+    }
+
+    private String negativeKey(int key) {
+        return "Can't add a negative key " + key + " to a ArrayMap!";
+    }
+
+    @Override
+    public int size() {
+        return size;
+    }
+
+    private abstract class EntryIterator<T> implements ObjectIterator<T> {
+        private int index = 0;
+
+        @Override
+        public int skip(int toSkip) {
+            if (toSkip > values.length()) toSkip = values.length();
+            index += toSkip;
+            return toSkip;
+        }
+
+        @Override
+        public boolean hasNext() {
+            AtomicReferenceArray<V> values = ArrayMap.this.values;
+            while (index < values.length()) {
+                V value = values.get(index);
+                if (value != null) {
+                    return true;
+                } else {
+                    index++;
+                }
+            }
+            return false;
+        }
+
+        /* default */ Int2ObjectMap.Entry<V> nextEntry() {
+            AtomicReferenceArray<V> values = ArrayMap.this.values;
+            while (index < values.length()) {
+                int key = index++;
+                V value = values.get(key);
+                if (value != null) {
+                    return new Entry(key, value);
+                }
+            }
+            throw new NoSuchElementException();
+        }
+    }
+
+    public class Entry implements Int2ObjectMap.Entry<V> {
+        private final int key;
+        private V value;
+
+        public Entry(int key, V value) {
+            this.key = key;
+            this.value = checkNotNull(value, "Null value");
+        }
+
+        @Override
+        public int getIntKey() {
+            return key;
+        }
+
+        @Override
+        public Integer getKey() {
+            return getIntKey();
+        }
+
+        @Override
+        public V getValue() {
+            return value;
+        }
+
+        @Override
+        public V setValue(V value) {
+            return put(key, this.value = checkNotNull(value, "Null value"));
+        }
+
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/net/techcable/tacospigot/NoOpLock.java b/src/main/java/net/techcable/tacospigot/NoOpLock.java
new file mode 100644
index 000000000..692170bdd
--- /dev/null
+++ b/src/main/java/net/techcable/tacospigot/NoOpLock.java
@@ -0,0 +1,36 @@
+package net.techcable.tacospigot;
+
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.locks.Condition;
+import java.util.concurrent.locks.Lock;
+
+public class NoOpLock implements Lock {
+    private NoOpLock() {}
+    public static final NoOpLock INSTANCE = new NoOpLock();
+
+    @Override
+    public void lock() {}
+
+    @Override
+    public void lockInterruptibly() throws InterruptedException {}
+
+    @Override
+    public boolean tryLock() {
+        return true;
+    }
+
+    @Override
+    public boolean tryLock(long time, TimeUnit unit) throws InterruptedException {
+        return true;
+    }
+
+    @Override
+    public void unlock() {
+
+    }
+
+    @Override
+    public Condition newCondition() {
+        throw new UnsupportedOperationException();
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/net/techcable/tacospigot/NoOpReadWriteLock.java b/src/main/java/net/techcable/tacospigot/NoOpReadWriteLock.java
new file mode 100644
index 000000000..a190239f1
--- /dev/null
+++ b/src/main/java/net/techcable/tacospigot/NoOpReadWriteLock.java
@@ -0,0 +1,22 @@
+package net.techcable.tacospigot;
+
+import java.util.concurrent.locks.Lock;
+import java.util.concurrent.locks.ReadWriteLock;
+import javax.annotation.Nonnull;
+
+public class NoOpReadWriteLock implements ReadWriteLock {
+    private NoOpReadWriteLock() {}
+    public static final NoOpReadWriteLock INSTANCE = new NoOpReadWriteLock();
+
+    @Override
+    @Nonnull
+    public Lock readLock() {
+        return NoOpLock.INSTANCE;
+    }
+
+    @Override
+    @Nonnull
+    public Lock writeLock() {
+        return NoOpLock.INSTANCE;
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/net/techcable/tacospigot/TacoSpigotConfig.java b/src/main/java/net/techcable/tacospigot/TacoSpigotConfig.java
index 22c6009ab..300d5066e 100644
--- a/src/main/java/net/techcable/tacospigot/TacoSpigotConfig.java
+++ b/src/main/java/net/techcable/tacospigot/TacoSpigotConfig.java
@@ -5,15 +5,10 @@ import java.io.IOException;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
-import java.util.HashMap;
 import java.util.List;
-import java.util.Map;
 import java.util.logging.Level;
 
-import net.minecraft.server.MinecraftServer;
-
 import org.bukkit.Bukkit;
-import org.bukkit.command.Command;
 import org.bukkit.configuration.InvalidConfigurationException;
 import org.bukkit.configuration.file.YamlConfiguration;
 
@@ -112,4 +107,15 @@ public class TacoSpigotConfig {
     private static void betterPvp() {
         betterPvp = getBoolean("betterPvp", false);
     }
+
+    public static boolean useArraysForDatawatcher;
+    private static void useArraysForDatawatcher() {
+        useArraysForDatawatcher = getBoolean("useArraysForDatawatcher", false);
+    }
+
+    public static boolean disableDataWatcherReadLocking;
+    private static void disableDataWatcherReadLocking() {
+        disableDataWatcherReadLocking = getBoolean("disableDataWatcherReadLocking", false);
+    }
+
 }
diff --git a/src/main/java/net/techcable/tacospigot/function/FunctionalMaps.java b/src/main/java/net/techcable/tacospigot/function/FunctionalMaps.java
new file mode 100644
index 000000000..4462cec4e
--- /dev/null
+++ b/src/main/java/net/techcable/tacospigot/function/FunctionalMaps.java
@@ -0,0 +1,29 @@
+package net.techcable.tacospigot.function;
+
+import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
+
+import java.util.Map;
+import java.util.function.ObjIntConsumer;
+import javax.annotation.ParametersAreNonnullByDefault;
+
+import net.techcable.tacospigot.ArrayMap;
+
+import static com.google.common.base.Preconditions.*;
+
+@ParametersAreNonnullByDefault
+public class FunctionalMaps {
+    public static <V> void forEachPrimitive(Int2ObjectMap<V> map, ObjIntConsumer<V> action) {
+        if (map instanceof ArrayMap) {
+            //noinspection unchecked - ur mums unchecked!
+            ((ArrayMap) checkNotNull(map, "Null map")).forEachPrimitive(action);
+        } else {
+            defaultForEachPrimitive(map, action);
+        }
+    }
+
+    private static <V> void defaultForEachPrimitive(Int2ObjectMap<V> map, ObjIntConsumer<V> action) {
+        for (Map.Entry<Integer, V> entry : map.entrySet()) {
+            action.accept(entry.getValue(), entry.getKey());
+        }
+    }
+}
-- 
2.11.0

